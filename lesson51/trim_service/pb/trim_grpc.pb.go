// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: trim.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrimClient is the client API for Trim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrimClient interface {
	// Sum 对两个数字求和
	TrimSpace(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error)
}

type trimClient struct {
	cc grpc.ClientConnInterface
}

func NewTrimClient(cc grpc.ClientConnInterface) TrimClient {
	return &trimClient{cc}
}

func (c *trimClient) TrimSpace(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*TrimResponse, error) {
	out := new(TrimResponse)
	err := c.cc.Invoke(ctx, "/pb.Trim/TrimSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrimServer is the server API for Trim service.
// All implementations must embed UnimplementedTrimServer
// for forward compatibility
type TrimServer interface {
	// Sum 对两个数字求和
	TrimSpace(context.Context, *TrimRequest) (*TrimResponse, error)
	mustEmbedUnimplementedTrimServer()
}

// UnimplementedTrimServer must be embedded to have forward compatible implementations.
type UnimplementedTrimServer struct {
}

func (UnimplementedTrimServer) TrimSpace(context.Context, *TrimRequest) (*TrimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimSpace not implemented")
}
func (UnimplementedTrimServer) mustEmbedUnimplementedTrimServer() {}

// UnsafeTrimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrimServer will
// result in compilation errors.
type UnsafeTrimServer interface {
	mustEmbedUnimplementedTrimServer()
}

func RegisterTrimServer(s grpc.ServiceRegistrar, srv TrimServer) {
	s.RegisterService(&Trim_ServiceDesc, srv)
}

func _Trim_TrimSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrimServer).TrimSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Trim/TrimSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrimServer).TrimSpace(ctx, req.(*TrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Trim_ServiceDesc is the grpc.ServiceDesc for Trim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Trim",
	HandlerType: (*TrimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrimSpace",
			Handler:    _Trim_TrimSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trim.proto",
}
