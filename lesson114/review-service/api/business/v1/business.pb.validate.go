// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/business/v1/business.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReplyReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyReviewRequestMultiError, or nil if none found.
func (m *ReplyReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := ReplyReviewRequestValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := ReplyReviewRequestValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 200 {
		err := ReplyReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return ReplyReviewRequestMultiError(errors)
	}

	return nil
}

// ReplyReviewRequestMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewRequestMultiError) AllErrors() []error { return m }

// ReplyReviewRequestValidationError is the validation error returned by
// ReplyReviewRequest.Validate if the designated constraints aren't met.
type ReplyReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewRequestValidationError) ErrorName() string {
	return "ReplyReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewRequestValidationError{}

// Validate checks the field values on ReplyReviewReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyReviewReplyMultiError, or nil if none found.
func (m *ReplyReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReplyID

	if len(errors) > 0 {
		return ReplyReviewReplyMultiError(errors)
	}

	return nil
}

// ReplyReviewReplyMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewReply.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewReplyMultiError) AllErrors() []error { return m }

// ReplyReviewReplyValidationError is the validation error returned by
// ReplyReviewReply.Validate if the designated constraints aren't met.
type ReplyReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewReplyValidationError) ErrorName() string { return "ReplyReviewReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewReplyValidationError{}

// Validate checks the field values on AppealReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewRequestMultiError, or nil if none found.
func (m *AppealReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := AppealReviewRequestValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := AppealReviewRequestValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 2 || l > 200 {
		err := AppealReviewRequestValidationError{
			field:  "Reason",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 200 {
		err := AppealReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return AppealReviewRequestMultiError(errors)
	}

	return nil
}

// AppealReviewRequestMultiError is an error wrapping multiple validation
// errors returned by AppealReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type AppealReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewRequestMultiError) AllErrors() []error { return m }

// AppealReviewRequestValidationError is the validation error returned by
// AppealReviewRequest.Validate if the designated constraints aren't met.
type AppealReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewRequestValidationError) ErrorName() string {
	return "AppealReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppealReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewRequestValidationError{}

// Validate checks the field values on AppealReviewReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewReplyMultiError, or nil if none found.
func (m *AppealReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppealID

	if len(errors) > 0 {
		return AppealReviewReplyMultiError(errors)
	}

	return nil
}

// AppealReviewReplyMultiError is an error wrapping multiple validation errors
// returned by AppealReviewReply.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewReplyMultiError) AllErrors() []error { return m }

// AppealReviewReplyValidationError is the validation error returned by
// AppealReviewReply.Validate if the designated constraints aren't met.
type AppealReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewReplyValidationError) ErrorName() string {
	return "AppealReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AppealReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewReplyValidationError{}
